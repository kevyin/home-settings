"use strict";
// The MIT License (MIT)
// 
// node-enumerable (https://github.com/mkloubert/node-enumerable)
// Copyright (c) Marcel Joachim Kloubert <marcel.kloubert@gmx.net>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
Object.defineProperty(exports, "__esModule", { value: true });
const Enumerable = require("../");
/**
 * Creates a list of sequences from items.
 *
 * @param {Enumerable.Sequence<T>} [items] The items for the sequences.
 *
 * @return {Enumerable.IEnumerable<T>[]} The created sequences.
 */
function createSequences(items) {
    return [
        Enumerable.from(items),
        Enumerable.from(toIterator(items)),
        Enumerable.from(toArray(items)),
    ];
}
exports.createSequences = createSequences;
/**
 * Executes an action and prints the execution time.
 *
 * @param {String} desc The description.
 * @param {Function} func The function to execution.
 *
 * @return {T} The result of the function.
 */
function execute(desc, func) {
    let ctx = {
        log: function (m) {
            if (m) {
                console.log(`\t\t\t${m}`);
            }
            return this;
        }
    };
    let startTime = new Date();
    try {
        console.log(`\t\t${desc}`);
        if (func) {
            return func(ctx);
        }
    }
    finally {
        let endTime = new Date();
        console.log(`\t\tFinished after ${(endTime.getTime() - startTime.getTime()) / 1000.0} seconds`);
    }
}
exports.execute = execute;
/**
 * Creates a function for sequences for items.
 *
 * @param {Enumerable.Sequence<T>} items The Items.
 * @param {SequenceFunc<T, TResult>} func The function to to invoke.
 *
 * @return {SequenceExecutionResult<T, TResult>[]} The result of the executions.
 */
function executeForSequences(items, func) {
    let results = [];
    let sequences = createSequences(items);
    for (let i = 0; i < sequences.length; i++) {
        let seq = sequences[i];
        let r;
        if (func) {
            r = func(seq, i);
        }
        results.push({
            index: i,
            result: r,
            sequence: seq,
        });
    }
    return results;
}
exports.executeForSequences = executeForSequences;
/**
 * Creates a new array from a sequence.
 *
 * @param {Enumerable.Sequence<T>} seq The sequence.
 *
 * @return {T[]} The new array.
 */
function toArray(seq) {
    let arr = [];
    if (seq) {
        for (let item of seq) {
            arr.push(item);
        }
    }
    return arr;
}
exports.toArray = toArray;
/**
 * Creates a new iterator from a sequence.
 *
 * @param {Enumerable.Sequence<T>} seq The sequence.
 *
 * @return {IterableIterator<T>} The new iterator.
 */
function* toIterator(seq) {
    if (seq) {
        for (let item of seq) {
            yield item;
        }
    }
}
exports.toIterator = toIterator;
//# sourceMappingURL=helpers.js.map